---
title: "Hunting and predator prey dynamics"
author: "Haylee Oyler & Josephine Cardelle"
format: 
  html:
    embed-resources: true
execute:
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(deSolve)
library(ggpubr)
library(tidyverse)
library(sensitivity)
library(lhs)
library(purrr)
library(ggpubr)
library(here)
```

## Part 1 - Hunting Function

```{r}
source(here("lotvmod_hunt.R"))
source(here("stability.R"))
```

## Part 2 - Stability

We chose to define stability as **prey and predator populations above 50 over the next 100 days**. While this is could be considered a large drop-off in population given the intial conditions (especially for the prey), it is important to remember that the prey populations are being subjected to two different forms of "net loss": predation and mortality. These two processes will dampen prey populations quickly, but they will stabilize. We believe that ~50 characterizes where that population stabilizes given the initial conditions we've been provided in the assignment. The same roughly holds true for the predators, where their population depends on mortality as well as prey population size.   

Before we jump into the stability analysis itself, we did some preliminary exploration of our function to make sure we were modeling the system accurately. 

### Initial Exploration

```{r}
# Base parameters given in the assignment
base_params <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, K = 2000)
pars <- c(base_params, rhunt = 0.001, prey_min = 50)
currpop <- c(prey = 60, pred = 20)
days <- seq(0, 100, by = 1)

# Run the ode model
res <- ode(y = currpop, times = days, func = lotvhunt, parms = pars, method = "radau")
res_df <- as.data.frame(res)
colnames(res_df) <- c("time", "prey", "pred")

res_long <- res_df %>%
    pivot_longer(cols = c(prey, pred), names_to = "species", values_to = "population")

# View the population changes over time
ggplot(res_long, aes(x = time, y = population, color = species)) +
    geom_line() +
    labs(title = "Predator and Prey Populations Over Time",
        x = "Time (days)",
        y = "Population",
        color = "Species") +
    theme_minimal()
```

We chose to select the `radau` method for the ODE solver because we were getting some warnings about step size. This seemed to help with missing data issues later on. 

Now that we feel good about our model, let's move on to checking stability 

### Hunting Scenarios

We'll use a parameter grid to test different combinations of minimum prey and hunting rates all together.

```{r}
# Create all combinations of rhunt and prey_min
prey_min_values = c(30, 50, 100, 200)
rhunt_values = c(0.01, 0.05, 0.1, 0.15)

# Combine prey min and rhunt into a parameter grid
param_grid <- expand.grid(rhunt = rhunt_values, 
                          prey_min = prey_min_values)

# Run model
results <- pmap(param_grid, function(rhunt, prey_min) {
  pars <- c(base_params, rhunt = rhunt, prey_min = prey_min)
  res <- ode(y = currpop, times = days, func = lotvhunt, parms = pars, method = "radau")
  res_df <- as.data.frame(res)
  colnames(res_df) <- c("time", "prey", "pred")
  
  res_long <- res_df %>%
    pivot_longer(cols = c(prey, pred), names_to = "species", values_to = "population") %>%
    mutate(rhunt = rhunt, prey_min = prey_min)
  
  return(res_long)
})

# Run stability check
stability_results <- map_lgl(results, check_stability)

# Create stability label table
stability_labels <- param_grid %>%
  mutate(stable = ifelse(stability_results, "Stable", "Unstable")) %>%
  mutate(facet_label = paste0("rhunt = ", rhunt, ", prey_min = ", prey_min, "\n(", stable, ")")) %>%
  arrange(rhunt, prey_min)  

# Combine all results
all_results <- bind_rows(results) %>%
  left_join(stability_labels, by = c("rhunt", "prey_min")) %>%
  mutate(facet_label = factor(facet_label, levels = unique(stability_labels$facet_label)))
```

```{r}
#| fig-width: 9
#| fig-height: 5

# Plot results
ggplot(all_results, aes(x = time, y = population, color = species)) +
  geom_line() +
  facet_wrap(~ facet_label) +
  labs(title = "Predator and prey populations over time for\ndifferent hunting rates and mininum prey populations",
    x = "Time (days)",
    y = "Population",
    color = "Species") +
  theme_minimal()
```

Looking at the plot results from this parameter grid, we can see that a hunting rate of [DESCRIBE WHAT'S MOST STABLE AHHH ]

### Calculate Stable Population Values

Now, let's use our new derivative functions from `lotvmod_hunt.R` to calculate what the values for stable predator and prey populations should be. We will do this by setting both derivatives equal to 0 and solving. These re-arranged formulas will then be plugged into solve for `preyi`, intial prey population, and `predi`, initial predator population. 

[EXPLAIN HOW WE TOOK THE MOST STABLE PARAMETERS ABOVE TO CHECK THIS PART HERE FOR PREY MIN AND RHUNT]
```{r}
# Set parameter list
pars <- data.frame(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, K = 2000, rhunt = 0.05, prey_min = 50)

# Calculate initial conditions we know to be stable 
preyi <- with(pars, pmort / (eff * alpha))
predi <- with(pars, rprey / alpha * (1 - (pmort / (eff * alpha *K))) - rhunt / alpha)

# Start with 1 for each as a test
currpop <- c(prey = 1, pred = 1)
res <- ode(func = lotvhunt, y = currpop, times = days, parms = pars, method = "radau")
res_smallstart <- as.data.frame(res) %>% gather(key = "animal", value = "pop", -time)

# Graph results
p1 <- ggplot(res_smallstart, aes(time, pop, col = animal)) +
  geom_line() +
  labs(title = "Population stability assuming intial populations of 1 for predator and prey",
       x = "Time (days)",
       y = "Population",
       color = "Species") +
  theme_minimal()
p1

# Use stable population estimates
stablepop <- c(prey = preyi, pred = predi)
res <- ode(func = lotvhunt, y = stablepop, times = days, parms = pars, method = "radau")
res_stablestart <- as.data.frame(res) %>% gather(key = "animal", value = "pop", -time)

# Graph results
p2 <- ggplot(res_stablestart, aes(time, pop, col = animal)) +
  geom_line() +
  labs(title = "Population stability using derivative-derived stable starting points",
       x = "Time (days)",
       y = "Population",
       color = "Species") +
  theme_minimal()
p2
print(paste0("Stable prey population: ", round(preyi, 2)))
print(paste0("Stable predator population: ", round(predi, 2)))

```

[SOME FINAL CONCLUSION IDK]