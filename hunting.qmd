---
title: "Hunting and predator prey dynamics"
author: "Haylee Oyler & Josephine Cardelle"
format: 
  html:
    embed-resources: true
execute:
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(deSolve)
library(ggpubr)
library(tidyverse)
library(sensitivity)
library(lhs)
library(purrr)
library(ggpubr)
library(here)
```

```{r}
source(here("lotvhuntmod_haylee.R"))
```

## Part 2

**Rubric: Stability Metric**The metric captures some aspect of stability and the metric is implemented as a function - that can be applied to a time series (or multiple time series)

**Rubric: Exploration of Stability** compared the stability metric across different values of parameters used to define hunting. The comparison should be explicit in the Rmarkdown - it could be a graph or a table but some way to show how different hunting levels influence stability


We chose to define stability as prey populations above 200 and predator populations above 20 after 100 years. We kept the 10:1 ratio of prey:predator that matched the initial conditions we went over in class. It makes sense that there would be much more prey than predators, and we're hoping both populations would increase over time. 

Explore how different hunting levels and different minimum prey populations (before hunting is allowed) are likely to effect the stability of the populations of both predator and prey.

A key challenge is how you might want to define stability? It is up to you but you will need to write a sentence to explain why you chose the measure that you did. 

It is up to you how you "explore" hunting  - you can simply try different values of the parameters in your hunting model or do it more formally by running your model across a range of values. You could think about parameter interactions


```{r}
# Base parameters given in the assignment
base_params <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, K = 2000)
pars <- c(base_params, rhunt = 0.01, prey_min = 50)
currpop <- c(prey = 100, pred = 10)
days <- seq(0, 100, by = 1)
years <- seq(1, 18250, by = 365)

# Run the ode model
res <- ode(y = currpop, times = days, func = lotvhunt, parms = pars)
res_df <- as.data.frame(res)
colnames(res_df) <- c("time", "prey", "pred")

res_long <- res_df %>%
    pivot_longer(cols = c(prey, pred), names_to = "species", values_to = "population")

# View the population changes over time
ggplot(res_long, aes(x = time, y = population, color = species)) +
    geom_line() +
    labs(title = "Predator and Prey Populations Over Time",
        x = "Time (days)",
        y = "Population",
        color = "Species") +
    theme_minimal()
```

## Grid Search Method
```{r}
rhunt_vals <- seq(0.001, 0.02, length.out = 15)
prey_min_vals <- seq(100, 400, length.out = 15)

param_grid <- expand.grid(rhunt = rhunt_vals, prey_min = prey_min_vals)
```


```{r}
results <- param_grid %>%
  mutate(
    stable = map2_lgl(rhunt, prey_min, function(rh, pm) {
      pars <- c(base_params, rhunt = rh, prey_min = pm)
      out <- tryCatch({
        df <- as.data.frame(ode(y = currpop, times = days, func = lotvhunt, parms = pars))
        final <- df[nrow(df), ]
        return(final$prey > 200 & final$pred > 20)
      }, error = function(e) {
        return(FALSE)
      })
      return(out)
    })
  )
```

```{r}
# Plot the results
ggplot(results, aes(x = prey_min, y = rhunt, z = as.numeric(stable))) +
  geom_contour_filled(breaks = c(-Inf, 0.5, Inf)) +
  scale_fill_manual(values = c("red", "green"), labels = c("Unstable", "Stable")) +
  labs(title = "Stability by Hunting Parameters",
       x = "Minimum Prey for Hunting",
       y = "Hunting Rate",
       fill = "Stability") +
  theme_minimal()

# Nothing is stable?
```



## Scenario Method

### Scenario 1: Low hunting rate, high threshold, Scenario 2: Reasonable hunting, Scenario 3: Higher hunting, Scenario 4: Very high hunting
```{r}
# Different values for parameters 
scenarios <- tibble(
  name = c("Low hunt", "Moderate hunt", "High Hunt", "Extreme Hunt"),
  rhunt = c(0.001, 0.01, 0.05, 0.1),
  prey_min = c(250, 500, 750, 1000)
)

results <- scenarios %>%
  mutate(
    output = map2(rhunt, prey_min, function(rh, pm) {
      pars <- c(base_params, rhunt = rh, prey_min = pm)
      as.data.frame(ode(y = currpop, times = days, func = lotvhunt, parms = pars))
    })
  )

# Plot the scenarios
results_long <- results %>%
  mutate(name = factor(name, levels = name)) %>%
  unnest(output) %>%
  pivot_longer(cols = c(prey, pred), names_to = "species", values_to = "population")

ggplot(results_long, aes(x = time, y = population, color = species)) +
  geom_line() +
  facet_wrap(~ name, ncol = 2) +
  labs(title = "Population Dynamics Under Different Hunting Scenarios",
       x = "Time (days)", y = "Population") +
  theme_minimal()

ggplot(results_long, aes(x = time, y = population, color = species)) +
  geom_line() +
  facet_wrap(~ prey_min, ncol = 2) +
  labs(title = "Population Dynamics Under Different Hunting Scenarios",
       x = "Time (days)", y = "Population") +
  theme_minimal()
```

### From chat...
```{r}
# Lotka-Volterra with hunting
lotvhunt <- function(t, pop, pars) {
  with(as.list(c(pars, pop)), {
    hunt <- ifelse(prey >= prey_min, rhunt * prey, 0)
    hunt <- min(hunt, prey)
    dprey <- rprey * (1 - prey / K) * prey - alpha * prey * pred - hunt
    dpred <- eff * alpha * prey * pred - pmort * pred
    return(list(c(dprey, dpred)))
  })
}

# Updated base parameters
base_pars <- list(
  rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4,
  K = 2000
)

# Initial populations
init_pop <- c(prey = 750, pred = 150)  # Start with healthy populations

# Time span (50 years)
times <- seq(0, 50, by = 1)

# Hunting parameter grid
rhunt_vals <- seq(0, 0.05, by = 0.005)
prey_min_vals <- seq(50, 1000, by = 100)
results <- expand.grid(rhunt = rhunt_vals, prey_min = prey_min_vals)

# Run simulations
outcomes <- results %>%
  rowwise() %>%
  mutate(
    stable = {
      pars <- c(base_pars, rhunt = rhunt, prey_min = prey_min)
      sim <- ode(func = lotvhunt, y = init_pop, times = days, parms = pars)
      final_prey <- tail(sim[, "prey"], 1)
      final_pred <- tail(sim[, "pred"], 1)
      final_prey >= 100 && final_pred >= 50
    }
  )

# Plotting the stable outcomes
ggplot(outcomes, aes(x = rhunt, y = prey_min, fill = stable)) +
  geom_tile(color = "white") +
  scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
  labs(
    title = "Sustainable Hunting Outcomes with Updated Parameters",
    x = "Hunting Rate (rhunt)",
    y = "Minimum Prey Threshold (prey_min)",
    fill = "Stable"
  ) +
  theme_minimal()

```

