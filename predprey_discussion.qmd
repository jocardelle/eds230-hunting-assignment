---
title: "Lecture12_discussion_section"
format: html
editor: visual
---

## Extra Example (LHS)

Here's an example using Latin HyperCube Sampling

With Partial Rank Correlation Coefficient

```{r setup}
library(here)
library(lhs)
library(epiR)
library(tidyverse)
library(deSolve)

source(here("lotvmodK.R"))
```

```{r latin }

# create parameter sets...
factors <- c("rprey", "K", "alpha", "eff", "pmort")
nsets <- 500

# create a latin hyper cube
sens_pp <- randomLHS(nsets, length(factors))
colnames(sens_pp) <- factors

# refine using sampling distributions for each parameter
sens_pp[, "rprey"] <- qunif(sens_pp[, "rprey"], min = 0.01, max = 0.3)
sens_pp[, "K"] <- qunif(sens_pp[, "K"], min = 10, max = 200)
sens_pp[, "alpha"] <- qunif(sens_pp[, "alpha"], min = 0.1, max = 0.4)
sens_pp[, "eff"] <- qnorm(sens_pp[, "eff"], mean = 0.3, sd = 0.01)
sens_pp[, "pmort"] <- qunif(sens_pp[, "pmort"], min = 0.05, max = 0.45)

# lets create a metric and wrapper function as we did for our population models

# first our metrics
# lets say we  want the maximum and minimum  of both predictor and prey

compute_metrics <- function(result) {
  maxprey <- max(result$prey)
  maxpred <- max(result$pred)
  minprey <- min(result$prey)
  minpred <- min(result$pred)
  return(list(maxprey = maxprey, minprey = minprey, maxpred = maxpred, minpred = minpred))
}

# build a wrapper function


p_wrapper <- function(rprey, alpha, eff, pmort, K, currpop, days, func) {
  parms <- list(rprey = rprey, alpha = alpha, eff = eff, pmort = pmort, K = K)
  result <- ode(y = currpop, times = days, func = func, parms = parms)
  colnames(result) <- c("time", "prey", "pred")
  # get metrics
  metrics <- compute_metrics(as.data.frame(result))
  return(metrics)
}


# run our model for all parameters and extract the results
currpop <- c(prey = 1, pred = 1)
days <- seq(from = 1, to = 500)
allresults <- as.data.frame(sens_pp) %>% pmap(p_wrapper, currpop = currpop, days = days, func = lotvmodK)

# take results back to unlisted form
allres <- allresults %>% map_dfr(`[`, c("maxprey", "minprey", "maxpred", "minpred"))


# range of response across parameter uncertainty
allresl <- allres %>% gather(key = "metric", value = "pop")
ggplot(allresl, aes(metric, pop)) +
  geom_boxplot()

# dealing with different scales
ggplot(allresl, aes(metric, pop, col = metric)) +
  geom_boxplot() +
  facet_wrap(~metric, scales = "free")
# plot cummulative densities

ggplot(allresl, aes(pop, col = metric)) +
  stat_ecdf(geom = "line") +
  facet_wrap(~metric, scales = "free")

# compute PRCCs using epi.prcc
# lets do first for maxpred

epi.prcc(cbind.data.frame(sens_pp, allres$maxpred))

# try minprey
epi.prcc(cbind.data.frame(sens_pp, allres$minprey))
```

## Stability

How do we think about stablity for multiple outputs (e.g. predator/prey)

Populations don't change when derivatives are zero!

What conditions lead to BOTH derivatives being zero

## Stability For *lotvmod*

-   dprey = rprey \* prey - alpha \* prey \* pred
-   dpred = eff\* alpha \* prey \* pred - pmort \*pred

Make dprey and dpred equal to 0 and rearrange

-   pred_i = rprey/alpha
-   prey_i = pmort/(eff \* alpha)

## Stability For *lotvmodK*

-   dprey = rprey \* (1-prey/K) \* prey - alpha \* prey \* pred
-   dpred = eff\* alpha \* prey \* pred - pmort \* pred

Make dprey and dpred equal to 0 and rearrange

-   prey_i = pmort/(eff \* alpha)
-   pred_i = rprey/alpha \* (1-prey_i/K)

Try setting you initial conditions close to these values and see what happens

```{r stabilitynew}
source(here("lotvmodK.R"))
# set parameter list
pars <- data.frame(rprey = 0.1, alpha = 0.6, eff = 0.8, pmort = 0.4, K = 200)

# now lets try initial conditions that will be stable
preyi <- with(pars, pmort / (eff * alpha))
predi <- with(pars, rprey / alpha * (1 - preyi / K))

preyi
predi
# times when you want to evaluate
days <- seq(from = 1, to = 500)

# lets first see what happens when we start with 1 of each
currpop <- c(prey = 1, pred = 1)
# run our differential equation solver
res <- ode(func = lotvmodK, y = currpop, times = days, parms = pars)
# extract the results
res_smallstart <- as.data.frame(res) %>% gather(key = "animal", value = "pop", -time)
# graph both populations over time
p1 <- ggplot(res_smallstart, aes(time, pop, col = animal)) +
  geom_line()
p1

# lets first see what happens when we start our estimates of stable populations
stablepop <- c(prey = preyi, pred = predi)
res <- ode(func = lotvmodK, y = stablepop, times = days, parms = pars)
# estract the results
res_stablestart <- as.data.frame(res) %>% gather(key = "animal", value = "pop", -time)
# graph both populations over time
p2 <- ggplot(res_stablestart, aes(time, pop, col = animal)) +
  geom_line()
p2

# explore with some different parameters
```
